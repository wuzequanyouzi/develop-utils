"use strict";(self["webpackChunkdocs_site"]=self["webpackChunkdocs_site"]||[]).push([[546],{3546:function(s,n,a){a.r(n),a.d(n,{default:function(){return ts}});var l=a(3396);const e=(0,l.uE)('<h1>前端脚手架</h1><h2>是什么？</h2><p>网络文库对脚手架的定义：</p><blockquote><p>为了保证各施工过程顺利进行而搭设的工作平台</p></blockquote><p>对于前端开发，前端脚手架是伴随前端工程化发展而产生的，通过选择几个选项快速搭建项目基础代码的工具。它可以有效避免我们<code>ctrl + c/v</code>。</p><h2>为什么</h2><p>目前前端常见的脚手架： Vue CLI、Create-React-App、vite等等。</p><p>这些都是社区通用的脚手架解决方案。</p><p>假如我们需要定制化的脚手架，例如企业内部的脚手架，那社区通用脚手架很难满足我们的需求；例如：</p><ol><li>内置公司内部工具依赖包</li><li>定制化<code>npm run</code>命令</li></ol><p>所以，有必要了解脚手架的实现。</p><h2>怎么办</h2><p>接下来，我们以Vue框架为例，从零搭建属于自己的脚手架。</p><h3>任务</h3><ol><li>解析命令行参数</li><li>提供可视化选项</li><li>提供多种模板： 页面工程、组件工程</li></ol><h4>命令行参数解析工具 <a href="npmjs.com/package/minimist">minimist</a></h4><p><code>minimist</code> 是一个用来解析命令行选项的库。</p><h4>轻巧美观人性化的命令行交互库<a href="https://www.npmjs.com/package/prompts">prompts</a></h4>',18),t=(0,l._)("pre",null,[(0,l._)("code",{"v-pre":"",class:"language-js"},[(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" prompts = "),(0,l._)("span",{class:"hljs-built_in"},"require"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-string"},"'prompts'"),(0,l.Uk)(");\n("),(0,l._)("span",{class:"hljs-keyword"},"async"),(0,l.Uk)(" () => {\n    "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" result = "),(0,l._)("span",{class:"hljs-keyword"},"await"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"prompts"),(0,l.Uk)("([\n        {\n            "),(0,l._)("span",{class:"hljs-attr"},"name"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},"'age'"),(0,l.Uk)(",\n            "),(0,l._)("span",{class:"hljs-attr"},"type"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},"'text'"),(0,l.Uk)(",\n            "),(0,l._)("span",{class:"hljs-attr"},"message"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},"'今年贵庚？'"),(0,l.Uk)(",\n            "),(0,l._)("span",{class:"hljs-attr"},"initial"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},"'99'"),(0,l.Uk)("\n        },\n        {\n            "),(0,l._)("span",{class:"hljs-attr"},"name"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},"'name'"),(0,l.Uk)(",\n            "),(0,l._)("span",{class:"hljs-attr"},"type"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},"'text'"),(0,l.Uk)(",\n            "),(0,l._)("span",{class:"hljs-attr"},"message"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},"'尊姓大名？'"),(0,l.Uk)(",\n            "),(0,l._)("span",{class:"hljs-attr"},"initial"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},"'鸡鸡鸡坤'"),(0,l.Uk)("\n        },\n    ])\n})();\n")])],-1),c=(0,l.uE)('<p><img src="https://pic.imgdb.cn/item/6524c94cc458853aef8feb7e.webp" alt="image.png"></p><h4>定制化模板</h4><p>提供多种模板，通过命令行交互界面，让用户自定义初始化项目，是非常有必要的。通常前端切图仔工程分为两种： 页面工程、组件工程。 前端工程一般都是 JS框架 + UI框架 + 工具 + 打包构建工具，例如:</p><ul><li>Vue + ElementUI + Axios... + webpack(vite)</li><li>React + Antd + Axios... + webpack(vite)</li></ul><p>接下来我以vue为例，来创建页面工程模板和组件工程模板（为了省去webpack的配置，我用VueCLI来创建工程模板）</p><h5>页面工程模板</h5><p>使用VueCLI创建页面工程，配置好<code>.browserslistrc</code>、和相关的环境变量文件<code>env</code>、<code>env.*</code>等各种定制化配置。</p><p><img src="https://pic.imgdb.cn/item/6524c956c458853aef8fed06.webp" alt="Snipaste_2023-03-19_15-27-13.png"></p>',8),p=(0,l._)("pre",null,[(0,l._)("code",{"v-pre":"",class:"language-json"},[(0,l._)("span",{class:"hljs-attr"},'"scripts"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-punctuation"},"{"),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-attr"},'"dev"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'"vue-cli-service serve"'),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-attr"},'"build:dev"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'"vue-cli-service build --mode develop --no-module"'),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-attr"},'"build:test"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'"vue-cli-service build --mode release --no-module"'),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-attr"},'"build:pro"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'"vue-cli-service build --mode production --no-module"'),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-attr"},'"build:report"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'"vue-cli-service build --mode production --no-module --report"'),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-attr"},'"test:unit"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'"vue-cli-service test:unit"'),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-attr"},'"lint"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'"vue-cli-service lint"'),(0,l.Uk)("\n"),(0,l._)("span",{class:"hljs-punctuation"},"}"),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n")])],-1),i=(0,l._)("h5",null,"组件工程模板",-1),r=(0,l._)("p",null,"同样使用VueCLI创建工程，但是需要改造一下目录结构和打包方式（这里不赘述）",-1),o=(0,l._)("p",null,[(0,l._)("img",{src:"https://pic.imgdb.cn/item/6524c956c458853aef8fed12.webp",alt:"image.png"})],-1),_=(0,l._)("h4",null,"组装",-1),k=(0,l._)("p",null,"有了命令行解析、命令行交互和工程模板，接下来我们就将它们组装起来，做成脚手架。",-1),h=(0,l._)("p",null,"初始化脚手架工程",-1),j=(0,l._)("pre",null,[(0,l._)("code",{"v-pre":"",class:"language-shell"},"npm init -y\n")],-1),U=(0,l._)("p",null,"初始化package.json",-1),u=(0,l._)("pre",null,[(0,l._)("code",{"v-pre":"",class:"language-json"},[(0,l._)("span",{class:"hljs-punctuation"},"{"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-attr"},'"name"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'"@ikun/create-project"'),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-attr"},'"version"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'"0.0.1"'),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-attr"},'"description"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'"鸡鸡鸡！ 搞一个自己的脚手架工程"'),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-attr"},'"bin"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-punctuation"},"{"),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-attr"},'"create-project"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'"index.js"'),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-punctuation"},"}"),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-attr"},'"scripts"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-punctuation"},"{"),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-attr"},'"dev"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'"node index.js"'),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-punctuation"},"}"),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-attr"},'"keywords"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-punctuation"},"["),(0,l._)("span",{class:"hljs-punctuation"},"]"),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-attr"},'"author"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'""'),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-attr"},'"license"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'"ISC"'),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-attr"},'"dependencies"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-punctuation"},"{"),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-attr"},'"kolorist"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'"^1.6.0"'),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-attr"},'"minimist"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'"^1.2.6"'),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-attr"},'"prompts"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'"^2.4.2"'),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-punctuation"},"}"),(0,l._)("span",{class:"hljs-punctuation"},","),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-attr"},'"devDependencies"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-punctuation"},"{"),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-attr"},'"@types/node"'),(0,l._)("span",{class:"hljs-punctuation"},":"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},'"^18.7.18"'),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-punctuation"},"}"),(0,l.Uk)("\n"),(0,l._)("span",{class:"hljs-punctuation"},"}"),(0,l.Uk)("\n")])],-1),d=(0,l._)("h5",null,"工程名称",-1),m=(0,l._)("p",null,[(0,l.Uk)("我们的工程名："),(0,l._)("code",null,"@ikun/create-project"),(0,l.Uk)("，取create前缀是有讲究的：")],-1),g=(0,l._)("p",null,"后续使用脚手架时，我们希望和vite、create-react-app类似。",-1),f=(0,l._)("pre",null,[(0,l._)("code",{"v-pre":"",class:"language-shell"},[(0,l.Uk)("npm init react-app my-project\n"),(0,l._)("span",{class:"hljs-meta prompt_"},"# "),(0,l._)("span",{class:"language-bash"},"or"),(0,l.Uk)("\nnpm init vite my-project\n"),(0,l._)("span",{class:"hljs-meta prompt_"},"# "),(0,l._)("span",{class:"language-bash"},"or"),(0,l.Uk)("\nnpm create vite my-project\n")])],-1),y=(0,l.uE)('<p><code>create</code> 其实是<code>init</code>的别名</p><p><img src="https://pic.imgdb.cn/item/6524c956c458853aef8fed30.webp" alt="image.png"></p><p>npm <code>init</code> 命令除了可以用来创建 package.json 文件，还可以用来执行一个包的命令；它后面还可以接一个 <code>&lt;initializer&gt;</code> 参数。</p><p>参数<code>initializer</code>是名为<code>create-&lt;initializer&gt;</code>的 npm 包 ( 例如 create-vite )，执行<code>npm init &lt;initializer&gt;</code>将会被转换为相应的<code>npm exec</code>操作，即会使用<code>npm exec</code>命令来运行<code>create-&lt;initializer&gt;</code>包中对应命令<code>create-&lt;initializer&gt;</code>（<code>package.json</code>的<code>bin</code>字段指定），例如：</p>',4),w=(0,l._)("pre",null,[(0,l._)("code",{"v-pre":"",class:"language-shell"},[(0,l.Uk)("npm init vite my-project\n"),(0,l._)("span",{class:"hljs-meta prompt_"},"# "),(0,l._)("span",{class:"language-bash"},"等同于"),(0,l.Uk)("\nnpm exec create-vite my-project\n")])],-1),b=(0,l._)("p",null,"我们的脚手架最终的使用形式应该如下：",-1),v=(0,l._)("pre",null,[(0,l._)("code",{"v-pre":"",class:"language-shell"},"npm init @ikun/project my-project\n")],-1),N=(0,l.uE)('<h5>模板</h5><p>在根目录下创建<code>templates</code>文件夹，用于存放我们的工程模板，供脚手架执行的时候拷贝到创建的工程文件夹中；这里我们将上面创建的页面工程模板和组件工程模板拷贝进来。</p><p><img src="https://pic.imgdb.cn/item/6524c94bc458853aef8feb72.webp" alt="image.png"></p><h5>可执行文件</h5><p><a href="https://docs.npmjs.com/cli/v6/configuring-npm/package-json#bin">bin属性的官方解释</a></p><p>许多软件包都具有一个或多个要安装到<code>PATH</code>中的可执行文件。</p><p><code>bin</code>字段是命令名到本地文件名的映射。在安装时<code>npm</code>会将文件符号链接到<code>prefix/bin</code>以进行全局安装或<code>./node_modules/.bin/</code>本地安装。</p><p>当我们使用<code>npm</code>或者<code>yarn</code>命令安装包时，如果该包的<code>package.json</code>文件有<code>bin</code>字段，就会在<code>node_modules</code>文件夹下面的<code>.bin</code>目录中复制了<code>bin</code>字段链接的执行文件。我们在调用执行文件时，可以不带路径，直接使用命令名来执行相对应的执行文件。</p><p>在根目录下创建<code>index.js</code>可执行文件。其功能是集成<code>minimist</code>、<code>prompts</code>, 然后生成工程模板。</p><p><strong>注意： 可执行文件需要在文件第一行开头写下 <a href="https://juejin.cn/post/6844903826344902670">#!/usr/bin/env node</a></strong>(不赘述，实现原理我也不懂，看解释)</p>',10),D=(0,l._)("pre",null,[(0,l._)("code",{"v-pre":"",class:"language-js"},[(0,l._)("span",{class:"hljs-meta"},"#!/usr/bin/env node"),(0,l.Uk)("\n\n"),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" fs = "),(0,l._)("span",{class:"hljs-built_in"},"require"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-string"},'"fs"'),(0,l.Uk)(");\n"),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" path = "),(0,l._)("span",{class:"hljs-built_in"},"require"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-string"},'"path"'),(0,l.Uk)(");\n\n"),(0,l._)("span",{class:"hljs-comment"},"// 命令行参数解析"),(0,l.Uk)("\n"),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" minimist = "),(0,l._)("span",{class:"hljs-built_in"},"require"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-string"},'"minimist"'),(0,l.Uk)(");\n"),(0,l._)("span",{class:"hljs-comment"},"// 命令行交互"),(0,l.Uk)("\n"),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" prompts = "),(0,l._)("span",{class:"hljs-built_in"},"require"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-string"},'"prompts"'),(0,l.Uk)(");\n\n")])],-1),S=(0,l.uE)("<p>我们分析一下 <code>npm init @ikun/project my-project --force</code>的流程</p><ol><li>执行<code>@ikun/create-project的index.js</code></li><li>解析参数： <code>my-project</code>、 <code>force</code>; 文件夹名： my-project 、 是否覆盖已有文件夹：force</li><li>显示命令行交互：</li></ol>",2),x=(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("pre",null,[(0,l._)("code",{"v-pre":""},"（1） 工程名称\n")])]),(0,l._)("li",null,[(0,l._)("pre",null,[(0,l._)("code",{"v-pre":""},"（2）是否覆盖已有的文件夹\n")])]),(0,l._)("li",null,[(0,l._)("pre",null,[(0,l._)("code",{"v-pre":""},"（3）定义packageName\n")])]),(0,l._)("li",null,[(0,l._)("pre",null,[(0,l._)("code",{"v-pre":""},"（4）选择工程模板\n")])])],-1),V=(0,l._)("ol",{start:"5"},[(0,l._)("li",null,"生成工程目录文件")],-1),O=(0,l._)("p",null,"上述我们已经完成了第一步，创建了可执行文件index.js; 接下来需要在文件内实现解析参数:",-1),T=(0,l._)("pre",null,[(0,l._)("code",{"v-pre":"",class:"language-js"},[(0,l._)("span",{class:"hljs-comment"},"// index.js"),(0,l.Uk)("\n\n"),(0,l._)("span",{class:"hljs-comment"},"// ...省略代码"),(0,l.Uk)("\n\n"),(0,l._)("span",{class:"hljs-keyword"},"async"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-keyword"},"function"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"init"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"}),(0,l.Uk)(") {\n  "),(0,l._)("span",{class:"hljs-comment"},"// --------- 解析参数start ----------"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" argv = "),(0,l._)("span",{class:"hljs-title function_"},"minimist"),(0,l.Uk)("(process."),(0,l._)("span",{class:"hljs-property"},"argv"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"slice"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-number"},"2"),(0,l.Uk)("), {\n    "),(0,l._)("span",{class:"hljs-comment"},"// 一些配置别名，本文档不涉及"),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-attr"},"alias"),(0,l.Uk)(": {\n      "),(0,l._)("span",{class:"hljs-attr"},"typescript"),(0,l.Uk)(": ["),(0,l._)("span",{class:"hljs-string"},'"ts"'),(0,l.Uk)("],\n      "),(0,l._)("span",{class:"hljs-string"},'"with-tests"'),(0,l.Uk)(": ["),(0,l._)("span",{class:"hljs-string"},'"tests"'),(0,l.Uk)("],\n      "),(0,l._)("span",{class:"hljs-attr"},"router"),(0,l.Uk)(": ["),(0,l._)("span",{class:"hljs-string"},'"vue-router"'),(0,l.Uk)("]\n    },\n    "),(0,l._)("span",{class:"hljs-attr"},"boolean"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-literal"},"true"),(0,l.Uk)("\n  });\n\n  "),(0,l._)("span",{class:"hljs-comment"},"// 获取要创建的文件夹名称"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-keyword"},"let"),(0,l.Uk)(" targetDir = argv."),(0,l._)("span",{class:"hljs-property"},"_"),(0,l.Uk)("["),(0,l._)("span",{class:"hljs-number"},"0"),(0,l.Uk)("];\n  \n  "),(0,l._)("span",{class:"hljs-comment"},"// 不存在的话，默认'vue-project'"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" defaultProjectName = !targetDir ? "),(0,l._)("span",{class:"hljs-string"},'"vue-project"'),(0,l.Uk)(" : targetDir;\n  "),(0,l._)("span",{class:"hljs-comment"},"// 是否强制覆盖当前重名的文件夹"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" forceOverwrite = argv."),(0,l._)("span",{class:"hljs-property"},"force"),(0,l.Uk)(";\n  \n  "),(0,l._)("span",{class:"hljs-comment"},"// --------- 解析参数 end ----------"),(0,l.Uk)("\n  \n}\n")])],-1),E=(0,l._)("p",null,"获取了命令行参数之后，我们需要进行第3步，显示命令行交互界面了：",-1),C=(0,l._)("pre",null,[(0,l._)("code",{"v-pre":"",class:"language-js"},[(0,l._)("span",{class:"hljs-comment"},"// ...省略代码"),(0,l.Uk)("\n\n"),(0,l._)("span",{class:"hljs-comment"},"// 更改命令行文字颜色的插件"),(0,l.Uk)("\n"),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" { red, green, bold } = "),(0,l._)("span",{class:"hljs-built_in"},"require"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-string"},'"kolorist"'),(0,l.Uk)(");\n\n"),(0,l._)("span",{class:"hljs-keyword"},"function"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"getOption"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},"name"),(0,l.Uk)(") {\n  "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" options = {\n    "),(0,l._)("span",{class:"hljs-attr"},"projectName"),(0,l.Uk)(": {\n      "),(0,l._)("span",{class:"hljs-attr"},"name"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},'"projectName"'),(0,l.Uk)(",\n      "),(0,l._)("span",{class:"hljs-attr"},"type"),(0,l.Uk)(": targetDir ? "),(0,l._)("span",{class:"hljs-literal"},"null"),(0,l.Uk)(" : "),(0,l._)("span",{class:"hljs-string"},'"text"'),(0,l.Uk)(",\n      "),(0,l._)("span",{class:"hljs-attr"},"message"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},'"工程名称:"'),(0,l.Uk)(",\n      "),(0,l._)("span",{class:"hljs-attr"},"initial"),(0,l.Uk)(": defaultProjectName,\n      "),(0,l._)("span",{class:"hljs-attr"},"onState"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-function"},[(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},"state"),(0,l.Uk)(") =>")]),(0,l.Uk)(" (targetDir = "),(0,l._)("span",{class:"hljs-title class_"},"String"),(0,l.Uk)("(state."),(0,l._)("span",{class:"hljs-property"},"value"),(0,l.Uk)(")."),(0,l._)("span",{class:"hljs-title function_"},"trim"),(0,l.Uk)("() || defaultProjectName)\n    },\n    "),(0,l._)("span",{class:"hljs-comment"},"//是否覆盖已有的文件夹"),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-attr"},"shouldOverwrite"),(0,l.Uk)(": {\n      "),(0,l._)("span",{class:"hljs-attr"},"name"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},'"shouldOverwrite"'),(0,l.Uk)(",\n      "),(0,l._)("span",{class:"hljs-comment"},"// 判断目录是否为空， canSkipEmptying（下面实现）"),(0,l.Uk)("\n      "),(0,l._)("span",{class:"hljs-attr"},"type"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-function"},"() =>"),(0,l.Uk)(" ("),(0,l._)("span",{class:"hljs-title function_"},"canSkipEmptying"),(0,l.Uk)("(targetDir) || forceOverwrite ? "),(0,l._)("span",{class:"hljs-literal"},"null"),(0,l.Uk)(" : "),(0,l._)("span",{class:"hljs-string"},'"confirm"'),(0,l.Uk)("),\n      "),(0,l._)("span",{class:"hljs-attr"},"message"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-function"},"() =>"),(0,l.Uk)(" {\n        "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" dirForPrompt =\n          targetDir === "),(0,l._)("span",{class:"hljs-string"},'"."'),(0,l.Uk)(" ? "),(0,l._)("span",{class:"hljs-string"},'"Current directory"'),(0,l.Uk)(" : "),(0,l._)("span",{class:"hljs-string"},[(0,l.Uk)('`Target directory "'),(0,l._)("span",{class:"hljs-subst"},"${targetDir}"),(0,l.Uk)('"`')]),(0,l.Uk)(";\n\n        "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-string"},[(0,l.Uk)("`"),(0,l._)("span",{class:"hljs-subst"},"${dirForPrompt}"),(0,l.Uk)(" 已存在。 是否删除?`")]),(0,l.Uk)(";\n      }\n    },\n    "),(0,l._)("span",{class:"hljs-attr"},"packageName"),(0,l.Uk)(": {\n      "),(0,l._)("span",{class:"hljs-attr"},"name"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},'"packageName"'),(0,l.Uk)(",\n      "),(0,l._)("span",{class:"hljs-comment"},"// isValidPackageName 判断package.name名称是否符合规范 （下面实现）"),(0,l.Uk)("\n      "),(0,l._)("span",{class:"hljs-attr"},"type"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-function"},"() =>"),(0,l.Uk)(" ("),(0,l._)("span",{class:"hljs-title function_"},"isValidPackageName"),(0,l.Uk)("(targetDir) ? "),(0,l._)("span",{class:"hljs-literal"},"null"),(0,l.Uk)(" : "),(0,l._)("span",{class:"hljs-string"},'"text"'),(0,l.Uk)("),\n      "),(0,l._)("span",{class:"hljs-attr"},"message"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},'"package name:"'),(0,l.Uk)(",\n      "),(0,l._)("span",{class:"hljs-comment"},"// 默认值： 将文件夹名称转为可用的package.name; toValidPackageName(下面实现)"),(0,l.Uk)("\n      "),(0,l._)("span",{class:"hljs-attr"},"initial"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-function"},"() =>"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"toValidPackageName"),(0,l.Uk)("(targetDir),\n      "),(0,l._)("span",{class:"hljs-attr"},"validate"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-function"},[(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},"dir"),(0,l.Uk)(") =>")]),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"isValidPackageName"),(0,l.Uk)("(dir) || "),(0,l._)("span",{class:"hljs-string"},'"无效的package name"'),(0,l.Uk)("\n    },\n    "),(0,l._)("span",{class:"hljs-attr"},"projectType"),(0,l.Uk)(": {\n      "),(0,l._)("span",{class:"hljs-attr"},"type"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},'"select"'),(0,l.Uk)(",\n      "),(0,l._)("span",{class:"hljs-attr"},"name"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},'"projectType"'),(0,l.Uk)(",\n      "),(0,l._)("span",{class:"hljs-attr"},"message"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},'"选择工程类型"'),(0,l.Uk)(",\n      "),(0,l._)("span",{class:"hljs-attr"},"choices"),(0,l.Uk)(": [\n        {\n          "),(0,l._)("span",{class:"hljs-attr"},"title"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},'"组件工程"'),(0,l.Uk)(",\n          "),(0,l._)("span",{class:"hljs-attr"},"description"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},'"以npm包/[微组件](篇幅有限，后续再开一篇新文件讲解微组件)的方式提供给业务侧使用"'),(0,l.Uk)(",\n          "),(0,l._)("span",{class:"hljs-attr"},"value"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},'"component"'),(0,l.Uk)("\n        },\n        {\n          "),(0,l._)("span",{class:"hljs-attr"},"title"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},'"vue2单页工程"'),(0,l.Uk)(",\n          "),(0,l._)("span",{class:"hljs-attr"},"description"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},'"vue2单页应用"'),(0,l.Uk)(",\n          "),(0,l._)("span",{class:"hljs-attr"},"value"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},'"page"'),(0,l.Uk)("\n        }\n      ],\n      "),(0,l._)("span",{class:"hljs-attr"},"initial"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-number"},"0"),(0,l.Uk)("\n    }\n  };\n  "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(" options[name]\n}\n\nasnyc "),(0,l._)("span",{class:"hljs-keyword"},"function"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"init"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"}),(0,l.Uk)(") {\n\n  "),(0,l._)("span",{class:"hljs-comment"},"// --------- 解析参数start ----------"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-comment"},"// ... 省略代码"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-comment"},"// --------- 解析参数 end ----------"),(0,l.Uk)("\n\n  "),(0,l._)("span",{class:"hljs-comment"},"// --------- 命令行交互 start ---------"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-comment"},"// result 用于存放用户的交互结果"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-keyword"},"let"),(0,l.Uk)(" result = {};\n  "),(0,l._)("span",{class:"hljs-keyword"},"try"),(0,l.Uk)(" {\n      result = "),(0,l._)("span",{class:"hljs-keyword"},"await"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"prompts"),(0,l.Uk)("([\n          "),(0,l._)("span",{class:"hljs-title function_"},"getOption"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-string"},"'projectName'"),(0,l.Uk)("), "),(0,l._)("span",{class:"hljs-comment"},"// 交互命令的工程名称配置"),(0,l.Uk)("\n          "),(0,l._)("span",{class:"hljs-title function_"},"getOption"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-string"},"'shouldOverwrite'"),(0,l.Uk)("), "),(0,l._)("span",{class:"hljs-comment"},"// 是否覆盖的配置"),(0,l.Uk)("\n          "),(0,l._)("span",{class:"hljs-title function_"},"getOption"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-string"},"'packageName'"),(0,l.Uk)("), "),(0,l._)("span",{class:"hljs-comment"},"// packageName的配置"),(0,l.Uk)("\n          "),(0,l._)("span",{class:"hljs-title function_"},"getOption"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-string"},"'projectType'"),(0,l.Uk)("), "),(0,l._)("span",{class:"hljs-comment"},"// 工程类型的配置"),(0,l.Uk)("\n      ],\n      {\n        "),(0,l._)("span",{class:"hljs-attr"},"onCancel"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-function"},"() =>"),(0,l.Uk)(" {\n          "),(0,l._)("span",{class:"hljs-keyword"},"throw"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-keyword"},"new"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title class_"},"Error"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-title function_"},"red"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-string"},'"✖"'),(0,l.Uk)(") + "),(0,l._)("span",{class:"hljs-string"},'" 操作已推出"'),(0,l.Uk)(");\n        }\n      }) \n  } "),(0,l._)("span",{class:"hljs-keyword"},"catch"),(0,l.Uk)("(cancelled) {\n    "),(0,l._)("span",{class:"hljs-variable language_"},"console"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"log"),(0,l.Uk)("(cancelled."),(0,l._)("span",{class:"hljs-property"},"message"),(0,l.Uk)(");\n    process."),(0,l._)("span",{class:"hljs-title function_"},"exit"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(");\n  }\n  "),(0,l._)("span",{class:"hljs-comment"},"// --------- 命令行交互 end ---------"),(0,l.Uk)("\n}\n")])],-1),P=(0,l.uE)("<p>上面我们通过prompts创建了命令行交互界面，名提供了四个交互选项：</p><ul><li>输入工程名称</li><li>（非必要显示项）是否覆盖已有目录</li><li>输入packageName</li><li>选择创建的工程类型</li></ul><p>其中我们会用到校验<code>package.name</code>的方法<code>isValidPackageName</code>和工程名转<code>package.name</code>的方法<code>toValidPackageName</code>。</p>",3),A=(0,l._)("pre",null,[(0,l._)("code",{"v-pre":"",class:"language-js"},[(0,l._)("span",{class:"hljs-comment"},"// index.js"),(0,l.Uk)("\n\n"),(0,l._)("span",{class:"hljs-comment"},"// 简单实现， 若想完整校验，可使用validate-npm-package-name库来检测"),(0,l.Uk)("\n"),(0,l._)("span",{class:"hljs-keyword"},"function"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"isValidPackageName"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},"projectName"),(0,l.Uk)(") {\n  "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-regexp"},"/^(?:@[a-z0-9-*~][a-z0-9-*._~]*\\/)?[a-z0-9-~][a-z0-9-._~]*$/"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"test"),(0,l.Uk)("(projectName);\n}\n\n"),(0,l._)("span",{class:"hljs-keyword"},"function"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"toValidPackageName"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},"projectName"),(0,l.Uk)(") {\n  "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(" projectName\n    ."),(0,l._)("span",{class:"hljs-title function_"},"trim"),(0,l.Uk)("()\n    ."),(0,l._)("span",{class:"hljs-title function_"},"toLowerCase"),(0,l.Uk)("()\n    ."),(0,l._)("span",{class:"hljs-title function_"},"replace"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-regexp"},"/\\s+/g"),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-string"},'"-"'),(0,l.Uk)(")\n    ."),(0,l._)("span",{class:"hljs-title function_"},"replace"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-regexp"},"/^[._]/"),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-string"},'""'),(0,l.Uk)(")\n    ."),(0,l._)("span",{class:"hljs-title function_"},"replace"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-regexp"},"/[^a-z0-9-~]+/g"),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-string"},'"-"'),(0,l.Uk)(");\n}\n")])],-1),z=(0,l._)("p",null,[(0,l.Uk)("另外还有一个"),(0,l._)("code",null,"canSkipEmptying"),(0,l.Uk)("方法, 判断工程目录是否为空：")],-1),J=(0,l._)("pre",null,[(0,l._)("code",{"v-pre":"",class:"language-js"},[(0,l._)("span",{class:"hljs-comment"},"// index.js"),(0,l.Uk)("\n"),(0,l._)("span",{class:"hljs-keyword"},"function"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"canSkipEmptying"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},"dir"),(0,l.Uk)(") {\n  "),(0,l._)("span",{class:"hljs-keyword"},"if"),(0,l.Uk)(" (!fs."),(0,l._)("span",{class:"hljs-title function_"},"existsSync"),(0,l.Uk)("(dir)) {\n    "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-literal"},"true"),(0,l.Uk)(";\n  }\n\n  "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" files = fs."),(0,l._)("span",{class:"hljs-title function_"},"readdirSync"),(0,l.Uk)("(dir);\n  "),(0,l._)("span",{class:"hljs-keyword"},"if"),(0,l.Uk)(" (files."),(0,l._)("span",{class:"hljs-property"},"length"),(0,l.Uk)(" === "),(0,l._)("span",{class:"hljs-number"},"0"),(0,l.Uk)(") {\n    "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-literal"},"true"),(0,l.Uk)(";\n  }\n  "),(0,l._)("span",{class:"hljs-keyword"},"if"),(0,l.Uk)(" (files."),(0,l._)("span",{class:"hljs-property"},"length"),(0,l.Uk)(" === "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(" && files["),(0,l._)("span",{class:"hljs-number"},"0"),(0,l.Uk)("] === "),(0,l._)("span",{class:"hljs-string"},'".git"'),(0,l.Uk)(") {\n    "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-literal"},"true"),(0,l.Uk)(";\n  }\n\n  "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-literal"},"false"),(0,l.Uk)(";\n}\n")])],-1),q=(0,l._)("p",null,[(0,l.Uk)("完成上面的代码之后，我们就可以拿到用户最终想要生成模板的参数对象"),(0,l._)("code",null,"result"),(0,l.Uk)("了，接下来我们实现第4步，生成工程文件：")],-1),I=(0,l._)("pre",null,[(0,l._)("code",{"v-pre":"",class:"language-js"},[(0,l._)("span",{class:"hljs-comment"},"// index.js"),(0,l.Uk)("\n\n"),(0,l._)("span",{class:"hljs-comment"},"// ... 省略代码"),(0,l.Uk)("\n\n"),(0,l._)("span",{class:"hljs-keyword"},"async"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-keyword"},"function"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"init"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"}),(0,l.Uk)(") {\n  "),(0,l._)("span",{class:"hljs-comment"},"// ... 省略代码"),(0,l.Uk)("\n  \n  \n  "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" {\n    projectName,\n    packageName = projectName ?? defaultProjectName,\n    shouldOverwrite = argv."),(0,l._)("span",{class:"hljs-property"},"force"),(0,l.Uk)(",\n    projectType = "),(0,l._)("span",{class:"hljs-string"},'"component"'),(0,l.Uk)("\n  } = result;\n  \n  "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" cwd = process."),(0,l._)("span",{class:"hljs-title function_"},"cwd"),(0,l.Uk)("();\n  "),(0,l._)("span",{class:"hljs-comment"},"// 获取要创建工程的绝对路径"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" root = path."),(0,l._)("span",{class:"hljs-title function_"},"join"),(0,l.Uk)("(cwd, targetDir);\n\n  "),(0,l._)("span",{class:"hljs-comment"},"// 这里是真正判断是否要覆盖文件夹"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-keyword"},"if"),(0,l.Uk)(" (fs."),(0,l._)("span",{class:"hljs-title function_"},"existsSync"),(0,l.Uk)("(root) && shouldOverwrite) {\n    "),(0,l._)("span",{class:"hljs-title function_"},"emptyDir"),(0,l.Uk)("(root); "),(0,l._)("span",{class:"hljs-comment"},"// emptyDir清空文件夹后面实现"),(0,l.Uk)("\n  } "),(0,l._)("span",{class:"hljs-keyword"},"else"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-keyword"},"if"),(0,l.Uk)(" (!fs."),(0,l._)("span",{class:"hljs-title function_"},"existsSync"),(0,l.Uk)("(root)) {\n    fs."),(0,l._)("span",{class:"hljs-title function_"},"mkdirSync"),(0,l.Uk)("(root);\n  }\n  \n  "),(0,l._)("span",{class:"hljs-comment"},"// 提示一下"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-variable language_"},"console"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"log"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-string"},[(0,l.Uk)("`\\n正在搭建工程 "),(0,l._)("span",{class:"hljs-subst"},"${root}"),(0,l.Uk)("...`")]),(0,l.Uk)(");\n  \n  "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" pkg = { "),(0,l._)("span",{class:"hljs-attr"},"name"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},'"@ikun/"'),(0,l.Uk)(" + packageName, "),(0,l._)("span",{class:"hljs-attr"},"version"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-string"},'"0.0.0"'),(0,l.Uk)(" };\n  fs."),(0,l._)("span",{class:"hljs-title function_"},"writeFileSync"),(0,l.Uk)("(path."),(0,l._)("span",{class:"hljs-title function_"},"resolve"),(0,l.Uk)("(root, "),(0,l._)("span",{class:"hljs-string"},'"package.json"'),(0,l.Uk)("), "),(0,l._)("span",{class:"hljs-title class_"},"JSON"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"stringify"),(0,l.Uk)("(pkg, "),(0,l._)("span",{class:"hljs-literal"},"null"),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-number"},"2"),(0,l.Uk)("));\n  \n  "),(0,l._)("span",{class:"hljs-comment"},"// 生成对应模板"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" templateRoot = path."),(0,l._)("span",{class:"hljs-title function_"},"resolve"),(0,l.Uk)("(__dirname, "),(0,l._)("span",{class:"hljs-string"},'"templates"'),(0,l.Uk)(");\n  "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" render = "),(0,l._)("span",{class:"hljs-keyword"},"function"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"render"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},"templateName"),(0,l.Uk)(") {\n    "),(0,l._)("span",{class:"hljs-comment"},"// templateDir 是脚手架工程中的模板路径"),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" templateDir = path."),(0,l._)("span",{class:"hljs-title function_"},"resolve"),(0,l.Uk)("(templateRoot, templateName);\n    "),(0,l._)("span",{class:"hljs-comment"},"// 将脚手架工程中的模板复制到创建的工程目录中"),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-title function_"},"renderTemplate"),(0,l.Uk)("(templateDir, root); "),(0,l._)("span",{class:"hljs-comment"},"// 生成模板文件夹及文件操作，下面实现"),(0,l.Uk)("\n  };\n  \n  "),(0,l._)("span",{class:"hljs-comment"},"// 生成结束，良好地提示一下用户该怎么启动工程"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" templateName = projectType;\n  "),(0,l._)("span",{class:"hljs-title function_"},"render"),(0,l.Uk)("(templateName);\n  \n  "),(0,l._)("span",{class:"hljs-variable language_"},"console"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"log"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-string"},"`\\nDone. Now run:\\n`"),(0,l.Uk)(");\n  "),(0,l._)("span",{class:"hljs-keyword"},"if"),(0,l.Uk)(" (root !== cwd) {\n    "),(0,l._)("span",{class:"hljs-variable language_"},"console"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"log"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-string"},[(0,l.Uk)("`  "),(0,l._)("span",{class:"hljs-subst"},[(0,l.Uk)("${bold(green("),(0,l._)("span",{class:"hljs-string"},[(0,l.Uk)("`cd "),(0,l._)("span",{class:"hljs-subst"},"${path.relative(cwd, root)}"),(0,l.Uk)("`")]),(0,l.Uk)("))}")]),(0,l.Uk)("`")]),(0,l.Uk)(");\n    "),(0,l._)("span",{class:"hljs-variable language_"},"console"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"log"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-string"},[(0,l.Uk)("`  "),(0,l._)("span",{class:"hljs-subst"},[(0,l.Uk)("${bold(green("),(0,l._)("span",{class:"hljs-string"},"`npm i`"),(0,l.Uk)("))}")]),(0,l.Uk)("`")]),(0,l.Uk)(");\n    "),(0,l._)("span",{class:"hljs-variable language_"},"console"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"log"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-string"},[(0,l.Uk)("`  "),(0,l._)("span",{class:"hljs-subst"},[(0,l.Uk)("${bold(green("),(0,l._)("span",{class:"hljs-string"},"`npm run dev`"),(0,l.Uk)("))}")]),(0,l.Uk)("`")]),(0,l.Uk)(");\n  }\n}\n\n"),(0,l._)("span",{class:"hljs-comment"},"// 执行初始化方法"),(0,l.Uk)("\n"),(0,l._)("span",{class:"hljs-title function_"},"init"),(0,l.Uk)("()."),(0,l._)("span",{class:"hljs-title function_"},"catch"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-function"},[(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},"e"),(0,l.Uk)(") =>")]),(0,l.Uk)(" {\n  "),(0,l._)("span",{class:"hljs-variable language_"},"console"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"error"),(0,l.Uk)("(e);\n});\n")])],-1),$=(0,l.uE)("<p>上面这段代码，就是将模板拷贝到目标目录上，其中我们调用了<code>emptyDir</code>来清空目标目录，调用了<code>renderTemplate</code>来将模板拷贝到目标目录上。接下来我们就来看下<code>emptyDir</code>和<code>renderTemplate</code>是如何实现的。</p><ul><li><code>emptyDir</code></li></ul><p>调用<code>emptyDir</code>传入参数是绝对路径，我们需要先判断文件夹是否存在，存在的话，再清除文件夹内的文件和文件夹。</p>",3),F=(0,l._)("pre",null,[(0,l._)("code",{"v-pre":"",class:"language-js"},[(0,l._)("span",{class:"hljs-comment"},[(0,l.Uk)("/**\n * 清空文件夹\n * "),(0,l._)("span",{class:"hljs-doctag"},"@param"),(0,l.Uk)(" dir 目标文件夹路径\n */")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"hljs-keyword"},"function"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"emptyDir"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},"dir"),(0,l.Uk)(") {\n  "),(0,l._)("span",{class:"hljs-keyword"},"if"),(0,l.Uk)(" (!fs."),(0,l._)("span",{class:"hljs-title function_"},"existsSync"),(0,l.Uk)("(dir)) {\n    "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(";\n  }\n\n  "),(0,l._)("span",{class:"hljs-comment"},"// 处理目录下的文件和文件夹"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-title function_"},"postOrderDirectoryTraverse"),(0,l.Uk)("(\n    dir,\n    "),(0,l._)("span",{class:"hljs-function"},[(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},"dir"),(0,l.Uk)(") =>")]),(0,l.Uk)(" fs."),(0,l._)("span",{class:"hljs-title function_"},"rmdirSync"),(0,l.Uk)("(dir),\n    "),(0,l._)("span",{class:"hljs-function"},[(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},"file"),(0,l.Uk)(") =>")]),(0,l.Uk)(" fs."),(0,l._)("span",{class:"hljs-title function_"},"unlinkSync"),(0,l.Uk)("(file)\n  );\n}\n\n"),(0,l._)("span",{class:"hljs-comment"},[(0,l.Uk)("/**\n * 处理目录下的文件和文件夹\n * "),(0,l._)("span",{class:"hljs-doctag"},"@param"),(0,l.Uk)(" dir 路径\n * "),(0,l._)("span",{class:"hljs-doctag"},"@param"),(0,l.Uk)(" dirCallback 处理文件夹的操作\n * "),(0,l._)("span",{class:"hljs-doctag"},"@param"),(0,l.Uk)(" fileCallback 处理文件的操作\n */")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"hljs-keyword"},"function"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"postOrderDirectoryTraverse"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},"dir, dirCallback, fileCallback"),(0,l.Uk)(") {\n  "),(0,l._)("span",{class:"hljs-keyword"},"for"),(0,l.Uk)(" ("),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" filename "),(0,l._)("span",{class:"hljs-keyword"},"of"),(0,l.Uk)(" fs."),(0,l._)("span",{class:"hljs-title function_"},"readdirSync"),(0,l.Uk)("(dir)) {\n    "),(0,l._)("span",{class:"hljs-keyword"},"if"),(0,l.Uk)(" (filename === "),(0,l._)("span",{class:"hljs-string"},'".git"'),(0,l.Uk)(") {\n      "),(0,l._)("span",{class:"hljs-keyword"},"continue"),(0,l.Uk)(";\n    }\n    "),(0,l._)("span",{class:"hljs-comment"},"// 文件/文件夹路径"),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" fullpath = path."),(0,l._)("span",{class:"hljs-title function_"},"resolve"),(0,l.Uk)("(dir, filename);\n    "),(0,l._)("span",{class:"hljs-keyword"},"if"),(0,l.Uk)(" (fs."),(0,l._)("span",{class:"hljs-title function_"},"lstatSync"),(0,l.Uk)("(fullpath)."),(0,l._)("span",{class:"hljs-title function_"},"isDirectory"),(0,l.Uk)("()) {\n      "),(0,l._)("span",{class:"hljs-comment"},"// 若为文件夹，递归处理"),(0,l.Uk)("\n      "),(0,l._)("span",{class:"hljs-title function_"},"postOrderDirectoryTraverse"),(0,l.Uk)("(fullpath, dirCallback, fileCallback);\n      "),(0,l._)("span",{class:"hljs-comment"},"// 对文件夹进行操作"),(0,l.Uk)("\n      "),(0,l._)("span",{class:"hljs-title function_"},"dirCallback"),(0,l.Uk)("(fullpath);\n      "),(0,l._)("span",{class:"hljs-keyword"},"continue"),(0,l.Uk)(";\n    }\n    "),(0,l._)("span",{class:"hljs-comment"},"// 对文件进行操作"),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-title function_"},"fileCallback"),(0,l.Uk)("(fullpath);\n  }\n}\n")])],-1),R=(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("code",null,"renderTemplate")])],-1),L=(0,l._)("p",null,[(0,l.Uk)("调用"),(0,l._)("code",null,"renderTemplate"),(0,l.Uk)("传入参数1: 脚手架工程内置的模板路径，传入参数2: 创建的工程目录路径")],-1),M=(0,l._)("pre",null,[(0,l._)("code",{"v-pre":"",class:"language-js"},[(0,l._)("span",{class:"hljs-comment"},"//复制模板"),(0,l.Uk)("\n"),(0,l._)("span",{class:"hljs-keyword"},"function"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"renderTemplate"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},"src, dest"),(0,l.Uk)(") {\n  "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" stats = fs."),(0,l._)("span",{class:"hljs-title function_"},"statSync"),(0,l.Uk)("(src);\n\n  "),(0,l._)("span",{class:"hljs-comment"},"/**\n   * 若是文件夹，且不是modules目录，则创建文件夹\n   * 再遍历文件夹下的内容，再递归处理文件和文件夹\n   */"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-keyword"},"if"),(0,l.Uk)(" (stats."),(0,l._)("span",{class:"hljs-title function_"},"isDirectory"),(0,l.Uk)("()) {\n    "),(0,l._)("span",{class:"hljs-keyword"},"if"),(0,l.Uk)(" (path."),(0,l._)("span",{class:"hljs-title function_"},"basename"),(0,l.Uk)("(src) === "),(0,l._)("span",{class:"hljs-string"},'"node_modules"'),(0,l.Uk)(") {\n      "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(";\n    }\n\n    fs."),(0,l._)("span",{class:"hljs-title function_"},"mkdirSync"),(0,l.Uk)("(dest, { "),(0,l._)("span",{class:"hljs-attr"},"recursive"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-literal"},"true"),(0,l.Uk)(" });\n    "),(0,l._)("span",{class:"hljs-keyword"},"for"),(0,l.Uk)(" ("),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" file "),(0,l._)("span",{class:"hljs-keyword"},"of"),(0,l.Uk)(" fs."),(0,l._)("span",{class:"hljs-title function_"},"readdirSync"),(0,l.Uk)("(src)) {\n      "),(0,l._)("span",{class:"hljs-title function_"},"renderTemplate"),(0,l.Uk)("(path."),(0,l._)("span",{class:"hljs-title function_"},"resolve"),(0,l.Uk)("(src, file), path."),(0,l._)("span",{class:"hljs-title function_"},"resolve"),(0,l.Uk)("(dest, file));\n    }\n    "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(";\n  }\n\n  "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" filename = path."),(0,l._)("span",{class:"hljs-title function_"},"basename"),(0,l.Uk)("(src);\n  \n  "),(0,l._)("span",{class:"hljs-comment"},"/**\n   * 若是package.json文件已存在，则合并\n   */"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-keyword"},"if"),(0,l.Uk)(" (filename === "),(0,l._)("span",{class:"hljs-string"},'"package.json"'),(0,l.Uk)(" && fs."),(0,l._)("span",{class:"hljs-title function_"},"existsSync"),(0,l.Uk)("(dest)) {\n    "),(0,l._)("span",{class:"hljs-comment"},"// merge instead of overwriting"),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" existing = "),(0,l._)("span",{class:"hljs-title class_"},"JSON"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"parse"),(0,l.Uk)("(fs."),(0,l._)("span",{class:"hljs-title function_"},"readFileSync"),(0,l.Uk)("(dest, "),(0,l._)("span",{class:"hljs-string"},'"utf8"'),(0,l.Uk)("));\n    "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" newPackage = "),(0,l._)("span",{class:"hljs-title class_"},"JSON"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"parse"),(0,l.Uk)("(fs."),(0,l._)("span",{class:"hljs-title function_"},"readFileSync"),(0,l.Uk)("(src, "),(0,l._)("span",{class:"hljs-string"},'"utf8"'),(0,l.Uk)("));\n    "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" pkg = "),(0,l._)("span",{class:"hljs-title function_"},"sortDependencies"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-title function_"},"deepMerge"),(0,l.Uk)("(existing, newPackage));\n    fs."),(0,l._)("span",{class:"hljs-title function_"},"writeFileSync"),(0,l.Uk)("(dest, "),(0,l._)("span",{class:"hljs-title class_"},"JSON"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"stringify"),(0,l.Uk)("(pkg, "),(0,l._)("span",{class:"hljs-literal"},"null"),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-number"},"2"),(0,l.Uk)(") + "),(0,l._)("span",{class:"hljs-string"},'"\\n"'),(0,l.Uk)(");\n    "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(";\n  }\n  \n  "),(0,l._)("span",{class:"hljs-comment"},"// 有些文件会被git识别，需要特殊处理，例如.gitignore"),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-keyword"},"if"),(0,l.Uk)(" (filename."),(0,l._)("span",{class:"hljs-title function_"},"startsWith"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-string"},'"_"'),(0,l.Uk)(")) {\n    "),(0,l._)("span",{class:"hljs-comment"},"// rename `_file` to `.file`"),(0,l.Uk)("\n    dest = path."),(0,l._)("span",{class:"hljs-title function_"},"resolve"),(0,l.Uk)("(path."),(0,l._)("span",{class:"hljs-title function_"},"dirname"),(0,l.Uk)("(dest), filename."),(0,l._)("span",{class:"hljs-title function_"},"replace"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-regexp"},"/^_/"),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-string"},'"."'),(0,l.Uk)("));\n  }\n  fs."),(0,l._)("span",{class:"hljs-title function_"},"copyFileSync"),(0,l.Uk)("(src, dest);\n}\n\n"),(0,l._)("span",{class:"hljs-comment"},"// 合并package文件的逻辑，不赘述，可以按照自己想要的方式实现，也可以不合并，直接覆盖"),(0,l.Uk)("\n"),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"isObject"),(0,l.Uk)(" = ("),(0,l._)("span",{class:"hljs-params"},"val"),(0,l.Uk)(") => val && "),(0,l._)("span",{class:"hljs-keyword"},"typeof"),(0,l.Uk)(" val === "),(0,l._)("span",{class:"hljs-string"},'"object"'),(0,l.Uk)(";\n"),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"mergeArrayWithDedupe"),(0,l.Uk)(" = ("),(0,l._)("span",{class:"hljs-params"},"a, b"),(0,l.Uk)(") => "),(0,l._)("span",{class:"hljs-title class_"},"Array"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"from"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-keyword"},"new"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title class_"},"Set"),(0,l.Uk)("([...a, ...b]));\n\n"),(0,l._)("span",{class:"hljs-keyword"},"function"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"deepMerge"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},"target, obj"),(0,l.Uk)(") {\n  "),(0,l._)("span",{class:"hljs-keyword"},"for"),(0,l.Uk)(" ("),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" key "),(0,l._)("span",{class:"hljs-keyword"},"of"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title class_"},"Object"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"keys"),(0,l.Uk)("(obj)) {\n    "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" oldVal = target[key];\n    "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" newVal = obj[key];\n\n    "),(0,l._)("span",{class:"hljs-keyword"},"if"),(0,l.Uk)(" ("),(0,l._)("span",{class:"hljs-title class_"},"Array"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"isArray"),(0,l.Uk)("(oldVal) && "),(0,l._)("span",{class:"hljs-title class_"},"Array"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"isArray"),(0,l.Uk)("(newVal)) {\n      target[key] = "),(0,l._)("span",{class:"hljs-title function_"},"mergeArrayWithDedupe"),(0,l.Uk)("(oldVal, newVal);\n    } "),(0,l._)("span",{class:"hljs-keyword"},"else"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-keyword"},"if"),(0,l.Uk)(" ("),(0,l._)("span",{class:"hljs-title function_"},"isObject"),(0,l.Uk)("(oldVal) && "),(0,l._)("span",{class:"hljs-title function_"},"isObject"),(0,l.Uk)("(newVal)) {\n      target[key] = "),(0,l._)("span",{class:"hljs-title function_"},"deepMerge"),(0,l.Uk)("(oldVal, newVal);\n    } "),(0,l._)("span",{class:"hljs-keyword"},"else"),(0,l.Uk)(" {\n      target[key] = newVal;\n    }\n  }\n\n  "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(" target;\n}\n"),(0,l._)("span",{class:"hljs-keyword"},"function"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-title function_"},"sortDependencies"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},"packageJson"),(0,l.Uk)(") {\n  "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" sorted = {};\n\n  "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" depTypes = ["),(0,l._)("span",{class:"hljs-string"},'"dependencies"'),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-string"},'"devDependencies"'),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-string"},'"peerDependencies"'),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-string"},'"optionalDependencies"'),(0,l.Uk)("];\n\n  "),(0,l._)("span",{class:"hljs-keyword"},"for"),(0,l.Uk)(" ("),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" depType "),(0,l._)("span",{class:"hljs-keyword"},"of"),(0,l.Uk)(" depTypes) {\n    "),(0,l._)("span",{class:"hljs-keyword"},"if"),(0,l.Uk)(" (packageJson[depType]) {\n      sorted[depType] = {};\n\n      "),(0,l._)("span",{class:"hljs-title class_"},"Object"),(0,l.Uk)("."),(0,l._)("span",{class:"hljs-title function_"},"keys"),(0,l.Uk)("(packageJson[depType])\n        ."),(0,l._)("span",{class:"hljs-title function_"},"sort"),(0,l.Uk)("()\n        ."),(0,l._)("span",{class:"hljs-title function_"},"forEach"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-function"},[(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},"name"),(0,l.Uk)(") =>")]),(0,l.Uk)(" {\n          sorted[depType][name] = packageJson[depType][name];\n        });\n    }\n  }\n\n  "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(" {\n    ...packageJson,\n    ...sorted\n  };\n}\n")])],-1),W=(0,l._)("p",null,"至此，一个脚手架基本完成，其实是缝合怪~~ , 让我们看看效果",-1),G=(0,l._)("p",null,"没有输入工程名称的时候：",-1),H=(0,l._)("pre",null,[(0,l._)("code",{"v-pre":"",class:"language-shell"},"node .\n")],-1),Z=(0,l._)("p",null,[(0,l._)("img",{src:"https://pic.imgdb.cn/item/6524c94bc458853aef8feb55.webp",alt:"image.png"})],-1),B=(0,l._)("p",null,[(0,l._)("img",{src:"https://pic.imgdb.cn/item/6524c94bc458853aef8feb4f.webp",alt:"image.png"})],-1),K=(0,l._)("p",null,[(0,l._)("img",{src:"https://pic.imgdb.cn/item/6524c956c458853aef8fed46.webp",alt:"image.png"})],-1),Q=(0,l._)("p",null,"当有输入工程名称的时候",-1),X=(0,l._)("pre",null,[(0,l._)("code",{"v-pre":"",class:"language-shell"},"node . my-project\n")],-1),Y=(0,l.uE)('<p><img src="https://pic.imgdb.cn/item/6524c956c458853aef8fed1e.webp" alt="image.png"></p><p>当启用强制覆盖的时候</p><p><img src="https://pic.imgdb.cn/item/6524c94bc458853aef8feb62.webp" alt="image.png"></p><h2>结语</h2><p>以上算是一个简单脚手架该做的事，总结一下：处理参数 =&gt; 用户交互结果 =&gt; 拷贝对应内容</p><p>针对模板内容，篇幅原因，本文只是简单提及，后续可扩展例如多页配置、内置指令、利用githooks结合standard-version进行push的时候生成<code>CHANGELOG</code>和发布npm包版本自动化、包括组件库模板预览<code>README.md</code>、通过<code>README.md</code>生成类似ElementUI组件文档等等。</p><p>觉得有用的切图哥哥们，请给只因弟弟一个赞~谢谢;</p><p>下一篇应该会讲如何将利用组件<code>README.md</code>生成组件文档。期待一波~~~</p><p>若本文有哪里不对，请批评指正。</p>',9),ss=[e,t,c,p,i,r,o,_,k,h,j,U,u,d,m,g,f,y,w,b,v,N,D,S,x,V,O,T,E,C,P,A,z,J,q,I,$,F,R,L,M,W,G,H,Z,B,K,Q,X,Y];function ns(s,n,a,e,t,c){return(0,l.wg)(),(0,l.iD)("section",null,ss)}var as={components:{}},ls=a(89);const es=(0,ls.Z)(as,[["render",ns]]);var ts=es}}]);
//# sourceMappingURL=546.fb76fb01.js.map