"use strict";(self["webpackChunkdocs_site"]=self["webpackChunkdocs_site"]||[]).push([[564],{1564:function(s,t,n){n.r(t),n.d(t,{default:function(){return k}});var p=n(3396);const c=(0,p.uE)('<blockquote><p>puerts是游戏引擎下的TypeScript编程解决方案</p><ul><li>提供了一个JavaScript运行时</li><li>提供通过TypeScript访问宿主引擎的能力（JavaScript层面的绑定以及TypeScript声明生成）</li></ul></blockquote><p><a href="https://github.com/Tencent/puerts">Puerts</a></p><p>最近在学U3D，偶然发现腾讯开源了个插件，支持用TS写U3D脚本，666。 于是看了下github说明，想看看怎么用，结果发现好像没什么指引教程。</p><p>官方给了Demo<a href="https://github.com/chexiongsheng/puerts_unity_demo#more-example--%E6%9B%B4%E5%A4%9A%E7%9A%84%E7%A4%BA%E4%BE%8B%E6%88%96%E8%80%85%E6%95%99%E7%A8%8B">puerts_unity_demo</a>,可以直接用官方的Demo来初始化项目；如果是从unity hub 直接创建的化，官方文档好像没有这部分的指引；于是我结合了<a href="https://www.bilibili.com/video/BV13v411g7sV">Unity TypeScript 脚本解决方案 Puerts 实例解析快速上手</a>这UP主的视频，终于是跑成功了。 接下来就记录一下吧~</p><h2>第一步：<a href="https://github.com/Tencent/puerts/releases">Puerts/releases</a></h2><p>下载发行版的puerts unity版 PuerTS_V8</p><p><img src="https://pic.imgdb.cn/item/6524c5d7c458853aef8f447f.jpg" alt="image.png"> 然后解压</p><p><img src="https://pic.imgdb.cn/item/6524c5e0c458853aef8f472e.jpg" alt="image.png"></p><h2>第二步：创建一个Unity工程</h2><p><img src="https://pic.imgdb.cn/item/6524c5e0c458853aef8f4717.jpg" alt="image.png"> 将刚才解压的Puerts文件夹拉到工程的Assets目录下</p><p><img src="https://pic.imgdb.cn/item/6524c5d7c458853aef8f4497.jpg" alt="image.png"> PS： 有报warning不用管，完成后面的操作，就不会报了。</p><h2>第三步：生成TS声明文件</h2><p>生成TS声明文件，需要配置Puerts，如果没有配置，生成出来的TS声明文件基本上没有类型提示的。 官方已经提供了一份比较全的Puerts配置文件</p><p>首先，将官方提供的<a href="https://github.com/chexiongsheng/puerts_unity_demo/blob/master/projects/1_Start_Template/Assets/Samples/Editor/01_WrapperGenerate/PuertsConfig.cs">PuertsConfig.cs</a>文件下载下来；</p><p>然后，在工程的Assets目录下创建<code>Editor</code>文件夹，将下载的<code>PuertsConfig.cs</code>文件复制到<code>Editor</code>目录下。</p><p>再然后，点击Unity工具栏的<code>PuerTS</code>选项，选择<code>Generate Code</code></p><p><img src="https://pic.imgdb.cn/item/6524c5e0c458853aef8f4700.jpg" alt="image.png"></p><p>等待生成完成，Console的warning就会消失，工程的Assets目录下会生成Gen文件夹，里面存放了UnityC#桥接到TS的各种类/方法/类型声明。</p><h2>第四步：创建TS工程</h2><p>在Assets目录下创建<code>TsProject</code>(名字可以任取)；进入<code>TsProject</code>,在命令行中执行<code>npm init -y</code>先初始化初始化package.json(要安装node.js，前端开发应该不陌生);</p><p>然后再执行<code>npm i typescript -D</code>,安装TS依赖</p><p>在<code>TsProject</code>目录下创建<code>tsconfig.json</code>文件</p>',22),a=(0,p._)("pre",null,[(0,p._)("code",{"v-pre":"",class:"language-json"},[(0,p._)("span",{class:"hljs-punctuation"},"{"),(0,p.Uk)("\n  "),(0,p._)("span",{class:"hljs-attr"},'"compilerOptions"'),(0,p._)("span",{class:"hljs-punctuation"},":"),(0,p.Uk)(),(0,p._)("span",{class:"hljs-punctuation"},"{"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"hljs-attr"},'"target"'),(0,p._)("span",{class:"hljs-punctuation"},":"),(0,p.Uk)(),(0,p._)("span",{class:"hljs-string"},'"esnext"'),(0,p._)("span",{class:"hljs-punctuation"},","),(0,p.Uk)("\n    "),(0,p._)("span",{class:"hljs-attr"},'"module"'),(0,p._)("span",{class:"hljs-punctuation"},":"),(0,p.Uk)(),(0,p._)("span",{class:"hljs-string"},'"commonjs"'),(0,p._)("span",{class:"hljs-punctuation"},","),(0,p.Uk)("\n    "),(0,p._)("span",{class:"hljs-attr"},'"sourceMap"'),(0,p._)("span",{class:"hljs-punctuation"},":"),(0,p.Uk)(),(0,p._)("span",{class:"hljs-literal"},[(0,p._)("span",{class:"hljs-keyword"},"true")]),(0,p._)("span",{class:"hljs-punctuation"},","),(0,p.Uk)("\n    "),(0,p._)("span",{class:"hljs-attr"},'"noImplicitAny"'),(0,p._)("span",{class:"hljs-punctuation"},":"),(0,p.Uk)(),(0,p._)("span",{class:"hljs-literal"},[(0,p._)("span",{class:"hljs-keyword"},"true")]),(0,p._)("span",{class:"hljs-punctuation"},","),(0,p.Uk)("\n    "),(0,p._)("span",{class:"hljs-attr"},'"typeRoots"'),(0,p._)("span",{class:"hljs-punctuation"},":"),(0,p.Uk)(),(0,p._)("span",{class:"hljs-punctuation"},"["),(0,p.Uk)("\n      "),(0,p._)("span",{class:"hljs-string"},'"../Puerts/Typing"'),(0,p._)("span",{class:"hljs-punctuation"},","),(0,p.Uk)("\n      "),(0,p._)("span",{class:"hljs-string"},'"../Gen/Typing"'),(0,p._)("span",{class:"hljs-punctuation"},","),(0,p.Uk)("\n      "),(0,p._)("span",{class:"hljs-string"},'"./node_modules/@types"'),(0,p.Uk)("\n    "),(0,p._)("span",{class:"hljs-punctuation"},"]"),(0,p._)("span",{class:"hljs-punctuation"},","),(0,p.Uk)("\n    "),(0,p._)("span",{class:"hljs-attr"},'"outDir"'),(0,p._)("span",{class:"hljs-punctuation"},":"),(0,p.Uk)(),(0,p._)("span",{class:"hljs-string"},'"output"'),(0,p.Uk)("\n  "),(0,p._)("span",{class:"hljs-punctuation"},"}"),(0,p.Uk)("\n"),(0,p._)("span",{class:"hljs-punctuation"},"}"),(0,p.Uk)("\n")])],-1),e=(0,p._)("p",null,[(0,p.Uk)("再然后：下载官方Demo的"),(0,p._)("a",{href:"https://github.com/chexiongsheng/puerts_unity_demo/blob/master/projects/0_Basic_Demo/TsProj/copyJsFile.js"},"copyJsFile.js"),(0,p.Uk)("到"),(0,p._)("code",null,"TsProject"),(0,p.Uk)("目录下。")],-1),l=(0,p._)("p",null,[(0,p.Uk)("在"),(0,p._)("code",null,"package.json"),(0,p.Uk)("文件夹中，编写执行脚本命令")],-1),i=(0,p._)("pre",null,[(0,p._)("code",{"v-pre":"",class:"language-json"},[(0,p._)("span",{class:"hljs-punctuation"},"{"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"hljs-attr"},'"scripts"'),(0,p._)("span",{class:"hljs-punctuation"},":"),(0,p.Uk)(),(0,p._)("span",{class:"hljs-punctuation"},"{"),(0,p.Uk)("\n        "),(0,p._)("span",{class:"hljs-attr"},'"build"'),(0,p._)("span",{class:"hljs-punctuation"},":"),(0,p.Uk)(),(0,p._)("span",{class:"hljs-string"},'"tsc -p tsconfig.json"'),(0,p._)("span",{class:"hljs-punctuation"},","),(0,p.Uk)("\n        "),(0,p._)("span",{class:"hljs-attr"},'"postbuild"'),(0,p._)("span",{class:"hljs-punctuation"},":"),(0,p.Uk)(),(0,p._)("span",{class:"hljs-string"},'"node copyJsFile.js output ../Resources"'),(0,p.Uk)("\n    "),(0,p._)("span",{class:"hljs-punctuation"},"}"),(0,p.Uk)("\n"),(0,p._)("span",{class:"hljs-punctuation"},"}"),(0,p.Uk)("\n")])],-1),o=(0,p._)("h2",null,"第五步： 编写TS脚本和CS中加载TS文件",-1),u=(0,p._)("p",null,[(0,p.Uk)("在"),(0,p._)("code",null,"TsProject"),(0,p.Uk)("目录下创建一个TS文件")],-1),r=(0,p._)("pre",null,[(0,p._)("code",{"v-pre":"",class:"language-ts"},[(0,p._)("span",{class:"hljs-comment"},"// Player.ts"),(0,p.Uk)("\n"),(0,p._)("span",{class:"hljs-keyword"},"import"),(0,p.Uk)(" {"),(0,p._)("span",{class:"hljs-title class_"},"UnityEngine"),(0,p.Uk)(", "),(0,p._)("span",{class:"hljs-title class_"},"System"),(0,p.Uk)("} "),(0,p._)("span",{class:"hljs-keyword"},"from"),(0,p.Uk)(),(0,p._)("span",{class:"hljs-string"},'"csharp"'),(0,p.Uk)(";\n"),(0,p._)("span",{class:"hljs-title class_"},"UnityEngine"),(0,p.Uk)("."),(0,p._)("span",{class:"hljs-property"},"Debug"),(0,p.Uk)("."),(0,p._)("span",{class:"hljs-title class_"},"Log"),(0,p.Uk)("("),(0,p._)("span",{class:"hljs-string"},'"hello world ts"'),(0,p.Uk)(");\n")])],-1),h=(0,p.uE)('<p>然后在<code>Assets</code>目录下创建一个<code>Resources</code>文件夹，用于存放CS加载的TS文本文件。</p><p>然后在TsProject路径下执行 <code>npm run build</code></p><p><img src="https://pic.imgdb.cn/item/6524c5d7c458853aef8f4463.jpg" alt="image.png"></p><p>编译完成之后，<code>Resources</code>目录下会出现对应的文本文件 <img src="https://pic.imgdb.cn/item/6524c5e0c458853aef8f46df.jpg" alt="image.png"></p><p>再然后，在<code>Assets</code>目录下创建一个CS脚本文件，我这里是将CS放在了<code>Scripts</code>目录下：</p><p><img src="https://pic.imgdb.cn/item/6524c5e6c458853aef8f4938.jpg" alt="image.png"> 在CS中引入Puerts库， 声明jsEnv变量，实例化一个JsEnv，并引入生成的Player.js.txt，Eval会执行该txt的代码。 <img src="https://pic.imgdb.cn/item/6524c5d7c458853aef8f445c.jpg" alt="image.png"></p><p>然后在Unity将CS拖到对应的Object上， playgame，</p><p><img src="https://pic.imgdb.cn/item/6524c5e0c458853aef8f46ea.jpg" alt="image.png"></p><p>这样就可以愉快地在Unity使用TS啦~</p><blockquote><p>PS： 目前发现个小问题，在TS中，获取游戏物体的component，当我获取物体的刚体组件，返回的值类型是Component而非Rigidbody，这会导致返回的值无法调用Rigidbody的属性/方法。只需要对返回的值指定Rigidbody类型即可。（不知道是我不会用，还是确实是index.d.ts定义缺失）</p></blockquote><p><img src="https://pic.imgdb.cn/item/6524c5d7c458853aef8f4450.jpg" alt="image.png"></p><p>菜鸟，请多指教，如有不对，请在评论区指出，谢谢~</p>',12),g=[c,a,e,l,i,o,u,r,h];function _(s,t,n,c,a,e){return(0,p.wg)(),(0,p.iD)("section",null,g)}var j={components:{}},d=n(89);const m=(0,d.Z)(j,[["render",_]]);var k=m}}]);
//# sourceMappingURL=564.94c831e5.js.map